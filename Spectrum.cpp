#include "Spectrum.h"
#include "vector4d.h"

/// スペクトルの範囲に注意する事!!

namespace prender 
{

// http://cvrl.ioo.ucl.ac.uk/cmfs.htm CIE 1964 10-deg, XYZ CMFs より
// 360nm - 830nm (1nm幅) で、波長->XYZ の関数
static const double wavelength2xyz_table[] = 
{
360,0.0000001222 ,0.0000000134 ,0.0000005350 ,//0
361,0.0000001851 ,0.0000000203 ,0.0000008107 ,//1
362,0.0000002788 ,0.0000000306 ,0.0000012212 ,//
363,0.0000004175 ,0.0000000457 ,0.0000018287 ,//
364,0.0000006213 ,0.0000000681 ,0.0000027222 ,//
365,0.0000009193 ,0.0000001007 ,0.0000040283 ,//
366,0.0000013520 ,0.0000001480 ,0.0000059257 ,//
367,0.0000019765 ,0.0000002163 ,0.0000086651 ,//
368,0.0000028725 ,0.0000003142 ,0.0000125960 ,//
369,0.0000041495 ,0.0000004537 ,0.0000182010 ,//
370,0.0000059586 ,0.0000006511 ,0.0000261437 ,//
371,0.0000085056 ,0.0000009288 ,0.0000373300 ,//
372,0.0000120686 ,0.0000013175 ,0.0000529870 ,//
373,0.0000170226 ,0.0000018572 ,0.0000747640 ,//
374,0.0000238680 ,0.0000026020 ,0.0001048700 ,//
375,0.0000332660 ,0.0000036250 ,0.0001462200 ,//
376,0.0000460870 ,0.0000050190 ,0.0002026600 ,//
377,0.0000634720 ,0.0000069070 ,0.0002792300 ,//
378,0.0000868920 ,0.0000094490 ,0.0003824500 ,//
379,0.0001182460 ,0.0000128480 ,0.0005207200 ,//
380,0.0001599520 ,0.0000173640 ,0.0007047760 ,//
381,0.0002150800 ,0.0000233270 ,0.0009482300 ,//
382,0.0002874900 ,0.0000311500 ,0.0012682000 ,//
383,0.0003819900 ,0.0000413500 ,0.0016861000 ,//
384,0.0005045500 ,0.0000545600 ,0.0022285000 ,//
385,0.0006624400 ,0.0000715600 ,0.0029278000 ,//
386,0.0008645000 ,0.0000933000 ,0.0038237000 ,//
387,0.0011215000 ,0.0001208700 ,0.0049642000 ,//
388,0.0014461600 ,0.0001556400 ,0.0064067000 ,//
389,0.0018535900 ,0.0001992000 ,0.0082193000 ,//
390,0.0023616000 ,0.0002534000 ,0.0104822000 ,//
391,0.0029906000 ,0.0003202000 ,0.0132890000 ,//
392,0.0037645000 ,0.0004024000 ,0.0167470000 ,//
393,0.0047102000 ,0.0005023000 ,0.0209800000 ,//
394,0.0058581000 ,0.0006232000 ,0.0261270000 ,//
395,0.0072423000 ,0.0007685000 ,0.0323440000 ,//
396,0.0088996000 ,0.0009417000 ,0.0398020000 ,//
397,0.0108709000 ,0.0011478000 ,0.0486910000 ,//
398,0.0131989000 ,0.0013903000 ,0.0592100000 ,//
399,0.0159292000 ,0.0016740000 ,0.0715760000 ,//
400,0.0191097000 ,0.0020044000 ,0.0860109000 ,//
401,0.0227880000 ,0.0023860000 ,0.1027400000 ,//
402,0.0270110000 ,0.0028220000 ,0.1220000000 ,//
403,0.0318290000 ,0.0033190000 ,0.1440200000 ,//
404,0.0372780000 ,0.0038800000 ,0.1689900000 ,//
405,0.0434000000 ,0.0045090000 ,0.1971200000 ,//
406,0.0502230000 ,0.0052090000 ,0.2285700000 ,//
407,0.0577640000 ,0.0059850000 ,0.2634700000 ,//
408,0.0660380000 ,0.0068330000 ,0.3019000000 ,//
409,0.0750330000 ,0.0077570000 ,0.3438700000 ,//
410,0.0847360000 ,0.0087560000 ,0.3893660000 ,//
411,0.0950410000 ,0.0098160000 ,0.4379700000 ,//
412,0.1058360000 ,0.0109180000 ,0.4892200000 ,//
413,0.1170660000 ,0.0120580000 ,0.5429000000 ,//
414,0.1286820000 ,0.0132370000 ,0.5988100000 ,//
415,0.1406380000 ,0.0144560000 ,0.6567600000 ,//
416,0.1528930000 ,0.0157170000 ,0.7165800000 ,//
417,0.1654160000 ,0.0170250000 ,0.7781200000 ,//
418,0.1781910000 ,0.0183990000 ,0.8413100000 ,//
419,0.1912140000 ,0.0198480000 ,0.9061100000 ,//
420,0.2044920000 ,0.0213910000 ,0.9725420000 ,//
421,0.2176500000 ,0.0229920000 ,1.0389000000 ,//
422,0.2302670000 ,0.0245980000 ,1.1031000000 ,//
423,0.2423110000 ,0.0262130000 ,1.1651000000 ,//
424,0.2537930000 ,0.0278410000 ,1.2249000000 ,//
425,0.2647370000 ,0.0294970000 ,1.2825000000 ,//
426,0.2751950000 ,0.0311950000 ,1.3382000000 ,//
427,0.2853010000 ,0.0329270000 ,1.3926000000 ,//
428,0.2951430000 ,0.0347380000 ,1.4461000000 ,//
429,0.3048690000 ,0.0366540000 ,1.4994000000 ,//
430,0.3146790000 ,0.0386760000 ,1.5534800000 ,//
431,0.3243550000 ,0.0407920000 ,1.6072000000 ,//
432,0.3335700000 ,0.0429460000 ,1.6589000000 ,//
433,0.3422430000 ,0.0451140000 ,1.7082000000 ,//
434,0.3503120000 ,0.0473330000 ,1.7548000000 ,//
435,0.3577190000 ,0.0496020000 ,1.7985000000 ,//
436,0.3644820000 ,0.0519340000 ,1.8392000000 ,//
437,0.3704930000 ,0.0543370000 ,1.8766000000 ,//
438,0.3757270000 ,0.0568220000 ,1.9105000000 ,//
439,0.3801580000 ,0.0593990000 ,1.9408000000 ,//
440,0.3837340000 ,0.0620770000 ,1.9672800000 ,//
441,0.3863270000 ,0.0647370000 ,1.9891000000 ,//
442,0.3878580000 ,0.0672850000 ,2.0057000000 ,//
443,0.3883960000 ,0.0697640000 ,2.0174000000 ,//
444,0.3879780000 ,0.0722180000 ,2.0244000000 ,//
445,0.3867260000 ,0.0747040000 ,2.0273000000 ,//
446,0.3846960000 ,0.0772720000 ,2.0264000000 ,//
447,0.3820060000 ,0.0799790000 ,2.0223000000 ,//
448,0.3787090000 ,0.0828740000 ,2.0153000000 ,//
449,0.3749150000 ,0.0860000000 ,2.0060000000 ,//
450,0.3707020000 ,0.0894560000 ,1.9948000000 ,//
451,0.3660890000 ,0.0929470000 ,1.9814000000 ,//
452,0.3610450000 ,0.0962750000 ,1.9653000000 ,//
453,0.3555180000 ,0.0995350000 ,1.9464000000 ,//
454,0.3494860000 ,0.1028290000 ,1.9248000000 ,//
455,0.3429570000 ,0.1062560000 ,1.9007000000 ,//
456,0.3358930000 ,0.1099010000 ,1.8741000000 ,//
457,0.3282840000 ,0.1138350000 ,1.8451000000 ,//
458,0.3201500000 ,0.1181670000 ,1.8139000000 ,//
459,0.3114750000 ,0.1229320000 ,1.7806000000 ,//
460,0.3022730000 ,0.1282010000 ,1.7453700000 ,//
461,0.2928580000 ,0.1334570000 ,1.7091000000 ,//
462,0.2835020000 ,0.1383230000 ,1.6723000000 ,//
463,0.2740440000 ,0.1430420000 ,1.6347000000 ,//
464,0.2642630000 ,0.1477870000 ,1.5956000000 ,//
465,0.2540850000 ,0.1527610000 ,1.5549000000 ,//
466,0.2433920000 ,0.1581020000 ,1.5122000000 ,//
467,0.2321870000 ,0.1639410000 ,1.4673000000 ,//
468,0.2204880000 ,0.1703620000 ,1.4199000000 ,//
469,0.2081980000 ,0.1774250000 ,1.3700000000 ,//
470,0.1956180000 ,0.1851900000 ,1.3175600000 ,//
471,0.1830340000 ,0.1930250000 ,1.2624000000 ,//
472,0.1702220000 ,0.2003130000 ,1.2050000000 ,//
473,0.1573480000 ,0.2071560000 ,1.1466000000 ,//
474,0.1446500000 ,0.2136440000 ,1.0880000000 ,//
475,0.1323490000 ,0.2199400000 ,1.0302000000 ,//
476,0.1205840000 ,0.2261700000 ,0.9738300000 ,//
477,0.1094560000 ,0.2324670000 ,0.9194300000 ,//
478,0.0990420000 ,0.2390250000 ,0.8674600000 ,//
479,0.0893880000 ,0.2459970000 ,0.8182800000 ,//
480,0.0805070000 ,0.2535890000 ,0.7721250000 ,//
481,0.0720340000 ,0.2618760000 ,0.7282900000 ,//
482,0.0637100000 ,0.2706430000 ,0.6860400000 ,//
483,0.0556940000 ,0.2796450000 ,0.6455300000 ,//
484,0.0481170000 ,0.2886940000 ,0.6068500000 ,//
485,0.0410720000 ,0.2976650000 ,0.5700600000 ,//
486,0.0346420000 ,0.3064690000 ,0.5352200000 ,//
487,0.0288960000 ,0.3150350000 ,0.5023400000 ,//
488,0.0238760000 ,0.3233350000 ,0.4714000000 ,//
489,0.0196280000 ,0.3313660000 ,0.4423900000 ,//
490,0.0161720000 ,0.3391330000 ,0.4152540000 ,//
491,0.0133000000 ,0.3478600000 ,0.3900240000 ,//
492,0.0107590000 ,0.3583260000 ,0.3663990000 ,//
493,0.0085420000 ,0.3700010000 ,0.3440150000 ,//
494,0.0066610000 ,0.3824640000 ,0.3226890000 ,//
495,0.0051320000 ,0.3953790000 ,0.3023560000 ,//
496,0.0039820000 ,0.4084820000 ,0.2830360000 ,//
497,0.0032390000 ,0.4215880000 ,0.2648160000 ,//
498,0.0029340000 ,0.4346190000 ,0.2478480000 ,//
499,0.0031140000 ,0.4476010000 ,0.2323180000 ,//
500,0.0038160000 ,0.4607770000 ,0.2185020000 ,//
501,0.0050950000 ,0.4743400000 ,0.2058510000 ,//
502,0.0069360000 ,0.4882000000 ,0.1935960000 ,//
503,0.0092990000 ,0.5023400000 ,0.1817360000 ,//
504,0.0121470000 ,0.5167400000 ,0.1702810000 ,//
505,0.0154440000 ,0.5313600000 ,0.1592490000 ,//
506,0.0191560000 ,0.5461900000 ,0.1486730000 ,//
507,0.0232500000 ,0.5611800000 ,0.1386090000 ,//
508,0.0276900000 ,0.5762900000 ,0.1290960000 ,//
509,0.0324440000 ,0.5915000000 ,0.1202150000 ,//
510,0.0374650000 ,0.6067410000 ,0.1120440000 ,//
511,0.0429560000 ,0.6221500000 ,0.1047100000 ,//
512,0.0491140000 ,0.6378300000 ,0.0981960000 ,//
513,0.0559200000 ,0.6537100000 ,0.0923610000 ,//
514,0.0633490000 ,0.6696800000 ,0.0870880000 ,//
515,0.0713580000 ,0.6856600000 ,0.0822480000 ,//
516,0.0799010000 ,0.7015500000 ,0.0777440000 ,//
517,0.0889090000 ,0.7172300000 ,0.0734560000 ,//
518,0.0982930000 ,0.7325700000 ,0.0692680000 ,//
519,0.1079490000 ,0.7474600000 ,0.0650600000 ,//
520,0.1177490000 ,0.7617570000 ,0.0607090000 ,//
521,0.1278390000 ,0.7753400000 ,0.0564570000 ,//
522,0.1384500000 ,0.7882200000 ,0.0526090000 ,//
523,0.1495160000 ,0.8004600000 ,0.0491220000 ,//
524,0.1610410000 ,0.8121400000 ,0.0459540000 ,//
525,0.1729530000 ,0.8233300000 ,0.0430500000 ,//
526,0.1852090000 ,0.8341200000 ,0.0403680000 ,//
527,0.1977550000 ,0.8446000000 ,0.0378390000 ,//
528,0.2105380000 ,0.8548700000 ,0.0353840000 ,//
529,0.2234600000 ,0.8650400000 ,0.0329490000 ,//
530,0.2364910000 ,0.8752110000 ,0.0304510000 ,//
531,0.2496330000 ,0.8853700000 ,0.0280290000 ,//
532,0.2629720000 ,0.8953700000 ,0.0258620000 ,//
533,0.2765150000 ,0.9051500000 ,0.0239200000 ,//
534,0.2902690000 ,0.9146500000 ,0.0221740000 ,//
535,0.3042130000 ,0.9238100000 ,0.0205840000 ,//
536,0.3183610000 ,0.9325500000 ,0.0191270000 ,//
537,0.3327050000 ,0.9408100000 ,0.0177400000 ,//
538,0.3472320000 ,0.9485200000 ,0.0164030000 ,//
539,0.3619260000 ,0.9556000000 ,0.0150640000 ,//
540,0.3767720000 ,0.9619880000 ,0.0136760000 ,//
541,0.3916830000 ,0.9675400000 ,0.0123080000 ,//
542,0.4065940000 ,0.9722300000 ,0.0110560000 ,//
543,0.4215390000 ,0.9761700000 ,0.0099150000 ,//
544,0.4365170000 ,0.9794600000 ,0.0088720000 ,//
545,0.4515840000 ,0.9822000000 ,0.0079180000 ,//
546,0.4667820000 ,0.9845200000 ,0.0070300000 ,//
547,0.4821470000 ,0.9865200000 ,0.0062230000 ,//
548,0.4977380000 ,0.9883200000 ,0.0054530000 ,//
549,0.5136060000 ,0.9900200000 ,0.0047140000 ,//
550,0.5298260000 ,0.9917610000 ,0.0039880000 ,//
551,0.5464400000 ,0.9935300000 ,0.0032890000 ,//
552,0.5634260000 ,0.9952300000 ,0.0026460000 ,//
553,0.5807260000 ,0.9967700000 ,0.0020630000 ,//
554,0.5982900000 ,0.9980900000 ,0.0015330000 ,//
555,0.6160530000 ,0.9991100000 ,0.0010910000 ,//
556,0.6339480000 ,0.9997700000 ,0.0007110000 ,//
557,0.6519010000 ,1.0000000000 ,0.0004070000 ,//
558,0.6698240000 ,0.9997100000 ,0.0001840000 ,//
559,0.6876320000 ,0.9988500000 ,0.0000470000 ,//
560,0.7052240000 ,0.9973400000 ,0.0000000000 ,//
561,0.7227730000 ,0.9952600000 ,0.0000000000 ,//
562,0.7404830000 ,0.9927400000 ,0.0000000000 ,//
563,0.7582730000 ,0.9897500000 ,0.0000000000 ,//
564,0.7760830000 ,0.9863000000 ,0.0000000000 ,//
565,0.7938320000 ,0.9823800000 ,0.0000000000 ,//
566,0.8114360000 ,0.9779800000 ,0.0000000000 ,//
567,0.8288220000 ,0.9731100000 ,0.0000000000 ,//
568,0.8458790000 ,0.9677400000 ,0.0000000000 ,//
569,0.8625250000 ,0.9618900000 ,0.0000000000 ,//
570,0.8786550000 ,0.9555520000 ,0.0000000000 ,//
571,0.8942080000 ,0.9486010000 ,0.0000000000 ,//
572,0.9092060000 ,0.9409810000 ,0.0000000000 ,//
573,0.9236720000 ,0.9327980000 ,0.0000000000 ,//
574,0.9376380000 ,0.9241580000 ,0.0000000000 ,//
575,0.9511620000 ,0.9151750000 ,0.0000000000 ,//
576,0.9642830000 ,0.9059540000 ,0.0000000000 ,//
577,0.9770680000 ,0.8966080000 ,0.0000000000 ,//
578,0.9895900000 ,0.8872490000 ,0.0000000000 ,//
579,1.0019100000 ,0.8779860000 ,0.0000000000 ,//
580,1.0141600000 ,0.8689340000 ,0.0000000000 ,//
581,1.0265000000 ,0.8601640000 ,0.0000000000 ,//
582,1.0388000000 ,0.8515190000 ,0.0000000000 ,//
583,1.0510000000 ,0.8429630000 ,0.0000000000 ,//
584,1.0629000000 ,0.8343930000 ,0.0000000000 ,//
585,1.0743000000 ,0.8256230000 ,0.0000000000 ,//
586,1.0852000000 ,0.8167640000 ,0.0000000000 ,//
587,1.0952000000 ,0.8075440000 ,0.0000000000 ,//
588,1.1042000000 ,0.7979470000 ,0.0000000000 ,//
589,1.1120000000 ,0.7878930000 ,0.0000000000 ,//
590,1.1185200000 ,0.7774050000 ,0.0000000000 ,//
591,1.1238000000 ,0.7664900000 ,0.0000000000 ,//
592,1.1280000000 ,0.7553090000 ,0.0000000000 ,//
593,1.1311000000 ,0.7438450000 ,0.0000000000 ,//
594,1.1332000000 ,0.7321900000 ,0.0000000000 ,//
595,1.1343000000 ,0.7203530000 ,0.0000000000 ,//
596,1.1343000000 ,0.7082810000 ,0.0000000000 ,//
597,1.1333000000 ,0.6960550000 ,0.0000000000 ,//
598,1.1312000000 ,0.6836210000 ,0.0000000000 ,//
599,1.1281000000 ,0.6710480000 ,0.0000000000 ,//
600,1.1239900000 ,0.6583410000 ,0.0000000000 ,//
601,1.1189000000 ,0.6455450000 ,0.0000000000 ,//
602,1.1129000000 ,0.6327180000 ,0.0000000000 ,//
603,1.1059000000 ,0.6198150000 ,0.0000000000 ,//
604,1.0980000000 ,0.6068870000 ,0.0000000000 ,//
605,1.0891000000 ,0.5938780000 ,0.0000000000 ,//
606,1.0792000000 ,0.5807810000 ,0.0000000000 ,//
607,1.0684000000 ,0.5676530000 ,0.0000000000 ,//
608,1.0567000000 ,0.5544900000 ,0.0000000000 ,//
609,1.0440000000 ,0.5412280000 ,0.0000000000 ,//
610,1.0304800000 ,0.5279630000 ,0.0000000000 ,//
611,1.0160000000 ,0.5146340000 ,0.0000000000 ,//
612,1.0008000000 ,0.5013630000 ,0.0000000000 ,//
613,0.9847900000 ,0.4881240000 ,0.0000000000 ,//
614,0.9680800000 ,0.4749350000 ,0.0000000000 ,//
615,0.9507400000 ,0.4618340000 ,0.0000000000 ,//
616,0.9328000000 ,0.4488230000 ,0.0000000000 ,//
617,0.9143400000 ,0.4359170000 ,0.0000000000 ,//
618,0.8953900000 ,0.4231530000 ,0.0000000000 ,//
619,0.8760300000 ,0.4105260000 ,0.0000000000 ,//
620,0.8562970000 ,0.3980570000 ,0.0000000000 ,//
621,0.8363500000 ,0.3858350000 ,0.0000000000 ,//
622,0.8162900000 ,0.3739510000 ,0.0000000000 ,//
623,0.7960500000 ,0.3623110000 ,0.0000000000 ,//
624,0.7756100000 ,0.3508630000 ,0.0000000000 ,//
625,0.7549300000 ,0.3395540000 ,0.0000000000 ,//
626,0.7339900000 ,0.3283090000 ,0.0000000000 ,//
627,0.7127800000 ,0.3171180000 ,0.0000000000 ,//
628,0.6912900000 ,0.3059360000 ,0.0000000000 ,//
629,0.6695200000 ,0.2947370000 ,0.0000000000 ,//
630,0.6474670000 ,0.2834930000 ,0.0000000000 ,//
631,0.6251100000 ,0.2722220000 ,0.0000000000 ,//
632,0.6025200000 ,0.2609900000 ,0.0000000000 ,//
633,0.5798900000 ,0.2498770000 ,0.0000000000 ,//
634,0.5573700000 ,0.2389460000 ,0.0000000000 ,//
635,0.5351100000 ,0.2282540000 ,0.0000000000 ,//
636,0.5132400000 ,0.2178530000 ,0.0000000000 ,//
637,0.4918600000 ,0.2077800000 ,0.0000000000 ,//
638,0.4710800000 ,0.1980720000 ,0.0000000000 ,//
639,0.4509600000 ,0.1887480000 ,0.0000000000 ,//
640,0.4315670000 ,0.1798280000 ,0.0000000000 ,//
641,0.4128700000 ,0.1712850000 ,0.0000000000 ,//
642,0.3947500000 ,0.1630590000 ,0.0000000000 ,//
643,0.3772100000 ,0.1551510000 ,0.0000000000 ,//
644,0.3601900000 ,0.1475350000 ,0.0000000000 ,//
645,0.3436900000 ,0.1402110000 ,0.0000000000 ,//
646,0.3276900000 ,0.1331700000 ,0.0000000000 ,//
647,0.3121700000 ,0.1264000000 ,0.0000000000 ,//
648,0.2971100000 ,0.1198920000 ,0.0000000000 ,//
649,0.2825000000 ,0.1136400000 ,0.0000000000 ,//
650,0.2683290000 ,0.1076330000 ,0.0000000000 ,//
651,0.2545900000 ,0.1018700000 ,0.0000000000 ,//
652,0.2413000000 ,0.0963470000 ,0.0000000000 ,//
653,0.2284800000 ,0.0910630000 ,0.0000000000 ,//
654,0.2161400000 ,0.0860100000 ,0.0000000000 ,//
655,0.2043000000 ,0.0811870000 ,0.0000000000 ,//
656,0.1929500000 ,0.0765830000 ,0.0000000000 ,//
657,0.1821100000 ,0.0721980000 ,0.0000000000 ,//
658,0.1717700000 ,0.0680240000 ,0.0000000000 ,//
659,0.1619200000 ,0.0640520000 ,0.0000000000 ,//
660,0.1525680000 ,0.0602810000 ,0.0000000000 ,//
661,0.1436700000 ,0.0566970000 ,0.0000000000 ,//
662,0.1352000000 ,0.0532920000 ,0.0000000000 ,//
663,0.1271300000 ,0.0500590000 ,0.0000000000 ,//
664,0.1194800000 ,0.0469980000 ,0.0000000000 ,//
665,0.1122100000 ,0.0440960000 ,0.0000000000 ,//
666,0.1053100000 ,0.0413450000 ,0.0000000000 ,//
667,0.0987860000 ,0.0387507000 ,0.0000000000 ,//
668,0.0926100000 ,0.0362978000 ,0.0000000000 ,//
669,0.0867730000 ,0.0339832000 ,0.0000000000 ,//
670,0.0812606000 ,0.0318004000 ,0.0000000000 ,//
671,0.0760480000 ,0.0297395000 ,0.0000000000 ,//
672,0.0711140000 ,0.0277918000 ,0.0000000000 ,//
673,0.0664540000 ,0.0259551000 ,0.0000000000 ,//
674,0.0620620000 ,0.0242263000 ,0.0000000000 ,//
675,0.0579300000 ,0.0226017000 ,0.0000000000 ,//
676,0.0540500000 ,0.0210779000 ,0.0000000000 ,//
677,0.0504120000 ,0.0196505000 ,0.0000000000 ,//
678,0.0470060000 ,0.0183153000 ,0.0000000000 ,//
679,0.0438230000 ,0.0170686000 ,0.0000000000 ,//
680,0.0408508000 ,0.0159051000 ,0.0000000000 ,//
681,0.0380720000 ,0.0148183000 ,0.0000000000 ,//
682,0.0354680000 ,0.0138008000 ,0.0000000000 ,//
683,0.0330310000 ,0.0128495000 ,0.0000000000 ,//
684,0.0307530000 ,0.0119607000 ,0.0000000000 ,//
685,0.0286230000 ,0.0111303000 ,0.0000000000 ,//
686,0.0266350000 ,0.0103555000 ,0.0000000000 ,//
687,0.0247810000 ,0.0096332000 ,0.0000000000 ,//
688,0.0230520000 ,0.0089599000 ,0.0000000000 ,//
689,0.0214410000 ,0.0083324000 ,0.0000000000 ,//
690,0.0199413000 ,0.0077488000 ,0.0000000000 ,//
691,0.0185440000 ,0.0072046000 ,0.0000000000 ,//
692,0.0172410000 ,0.0066975000 ,0.0000000000 ,//
693,0.0160270000 ,0.0062251000 ,0.0000000000 ,//
694,0.0148960000 ,0.0057850000 ,0.0000000000 ,//
695,0.0138420000 ,0.0053751000 ,0.0000000000 ,//
696,0.0128620000 ,0.0049941000 ,0.0000000000 ,//
697,0.0119490000 ,0.0046392000 ,0.0000000000 ,//
698,0.0111000000 ,0.0043093000 ,0.0000000000 ,//
699,0.0103110000 ,0.0040028000 ,0.0000000000 ,//
700,0.0095768800 ,0.0037177400 ,0.0000000000 ,//
701,0.0088940000 ,0.0034526200 ,0.0000000000 ,//
702,0.0082581000 ,0.0032058300 ,0.0000000000 ,//
703,0.0076664000 ,0.0029762300 ,0.0000000000 ,//
704,0.0071163000 ,0.0027628100 ,0.0000000000 ,//
705,0.0066052000 ,0.0025645600 ,0.0000000000 ,//
706,0.0061306000 ,0.0023804800 ,0.0000000000 ,//
707,0.0056903000 ,0.0022097100 ,0.0000000000 ,//
708,0.0052819000 ,0.0020513200 ,0.0000000000 ,//
709,0.0049033000 ,0.0019044900 ,0.0000000000 ,//
710,0.0045526300 ,0.0017684700 ,0.0000000000 ,//
711,0.0042275000 ,0.0016423600 ,0.0000000000 ,//
712,0.0039258000 ,0.0015253500 ,0.0000000000 ,//
713,0.0036457000 ,0.0014167200 ,0.0000000000 ,//
714,0.0033859000 ,0.0013159500 ,0.0000000000 ,//
715,0.0031447000 ,0.0012223900 ,0.0000000000 ,//
716,0.0029208000 ,0.0011355500 ,0.0000000000 ,//
717,0.0027130000 ,0.0010549400 ,0.0000000000 ,//
718,0.0025202000 ,0.0009801400 ,0.0000000000 ,//
719,0.0023411000 ,0.0009106600 ,0.0000000000 ,//
720,0.0021749600 ,0.0008461900 ,0.0000000000 ,//
721,0.0020206000 ,0.0007862900 ,0.0000000000 ,//
722,0.0018773000 ,0.0007306800 ,0.0000000000 ,//
723,0.0017441000 ,0.0006789900 ,0.0000000000 ,//
724,0.0016205000 ,0.0006310100 ,0.0000000000 ,//
725,0.0015057000 ,0.0005864400 ,0.0000000000 ,//
726,0.0013992000 ,0.0005451100 ,0.0000000000 ,//
727,0.0013004000 ,0.0005067200 ,0.0000000000 ,//
728,0.0012087000 ,0.0004711100 ,0.0000000000 ,//
729,0.0011236000 ,0.0004380500 ,0.0000000000 ,//
730,0.0010447600 ,0.0004074100 ,0.0000000000 ,//
731,0.0009715600 ,0.0003789620 ,0.0000000000 ,//
732,0.0009036000 ,0.0003525430 ,0.0000000000 ,//
733,0.0008404800 ,0.0003280010 ,0.0000000000 ,//
734,0.0007818700 ,0.0003052080 ,0.0000000000 ,//
735,0.0007274500 ,0.0002840410 ,0.0000000000 ,//
736,0.0006769000 ,0.0002643750 ,0.0000000000 ,//
737,0.0006299600 ,0.0002461090 ,0.0000000000 ,//
738,0.0005863700 ,0.0002291430 ,0.0000000000 ,//
739,0.0005458700 ,0.0002133760 ,0.0000000000 ,//
740,0.0005082580 ,0.0001987300 ,0.0000000000 ,//
741,0.0004733000 ,0.0001851150 ,0.0000000000 ,//
742,0.0004408000 ,0.0001724540 ,0.0000000000 ,//
743,0.0004105800 ,0.0001606780 ,0.0000000000 ,//
744,0.0003824900 ,0.0001497300 ,0.0000000000 ,//
745,0.0003563800 ,0.0001395500 ,0.0000000000 ,//
746,0.0003321100 ,0.0001300860 ,0.0000000000 ,//
747,0.0003095500 ,0.0001212900 ,0.0000000000 ,//
748,0.0002885800 ,0.0001131060 ,0.0000000000 ,//
749,0.0002690900 ,0.0001055010 ,0.0000000000 ,//
750,0.0002509690 ,0.0000984280 ,0.0000000000 ,//
751,0.0002341300 ,0.0000918530 ,0.0000000000 ,//
752,0.0002184700 ,0.0000857380 ,0.0000000000 ,//
753,0.0002039100 ,0.0000800480 ,0.0000000000 ,//
754,0.0001903500 ,0.0000747510 ,0.0000000000 ,//
755,0.0001777300 ,0.0000698190 ,0.0000000000 ,//
756,0.0001659700 ,0.0000652220 ,0.0000000000 ,//
757,0.0001550200 ,0.0000609390 ,0.0000000000 ,//
758,0.0001448000 ,0.0000569420 ,0.0000000000 ,//
759,0.0001352800 ,0.0000532170 ,0.0000000000 ,//
760,0.0001263900 ,0.0000497370 ,0.0000000000 ,//
761,0.0001181000 ,0.0000464910 ,0.0000000000 ,//
762,0.0001103700 ,0.0000434640 ,0.0000000000 ,//
763,0.0001031500 ,0.0000406350 ,0.0000000000 ,//
764,0.0000964270 ,0.0000380000 ,0.0000000000 ,//
765,0.0000901510 ,0.0000355405 ,0.0000000000 ,//
766,0.0000842940 ,0.0000332448 ,0.0000000000 ,//
767,0.0000788300 ,0.0000311006 ,0.0000000000 ,//
768,0.0000737290 ,0.0000290990 ,0.0000000000 ,//
769,0.0000689690 ,0.0000272307 ,0.0000000000 ,//
770,0.0000645258 ,0.0000254860 ,0.0000000000 ,//
771,0.0000603760 ,0.0000238561 ,0.0000000000 ,//
772,0.0000565000 ,0.0000223332 ,0.0000000000 ,//
773,0.0000528800 ,0.0000209104 ,0.0000000000 ,//
774,0.0000494980 ,0.0000195808 ,0.0000000000 ,//
775,0.0000463390 ,0.0000183384 ,0.0000000000 ,//
776,0.0000433890 ,0.0000171777 ,0.0000000000 ,//
777,0.0000406340 ,0.0000160934 ,0.0000000000 ,//
778,0.0000380600 ,0.0000150800 ,0.0000000000 ,//
779,0.0000356570 ,0.0000141336 ,0.0000000000 ,//
780,0.0000334117 ,0.0000132490 ,0.0000000000 ,//
781,0.0000313150 ,0.0000124226 ,0.0000000000 ,//
782,0.0000293550 ,0.0000116499 ,0.0000000000 ,//
783,0.0000275240 ,0.0000109277 ,0.0000000000 ,//
784,0.0000258110 ,0.0000102519 ,0.0000000000 ,//
785,0.0000242090 ,0.0000096196 ,0.0000000000 ,//
786,0.0000227110 ,0.0000090281 ,0.0000000000 ,//
787,0.0000213080 ,0.0000084740 ,0.0000000000 ,//
788,0.0000199940 ,0.0000079548 ,0.0000000000 ,//
789,0.0000187640 ,0.0000074686 ,0.0000000000 ,//
790,0.0000176115 ,0.0000070128 ,0.0000000000 ,//
791,0.0000165320 ,0.0000065858 ,0.0000000000 ,//
792,0.0000155210 ,0.0000061857 ,0.0000000000 ,//
793,0.0000145740 ,0.0000058107 ,0.0000000000 ,//
794,0.0000136860 ,0.0000054590 ,0.0000000000 ,//
795,0.0000128550 ,0.0000051298 ,0.0000000000 ,//
796,0.0000120750 ,0.0000048206 ,0.0000000000 ,//
797,0.0000113450 ,0.0000045312 ,0.0000000000 ,//
798,0.0000106590 ,0.0000042591 ,0.0000000000 ,//
799,0.0000100170 ,0.0000040042 ,0.0000000000 ,//
800,0.0000094136 ,0.0000037647 ,0.0000000000 ,//
801,0.0000088479 ,0.0000035400 ,0.0000000000 ,//
802,0.0000083171 ,0.0000033291 ,0.0000000000 ,//
803,0.0000078190 ,0.0000031312 ,0.0000000000 ,//
804,0.0000073516 ,0.0000029453 ,0.0000000000 ,//
805,0.0000069130 ,0.0000027708 ,0.0000000000 ,//
806,0.0000065015 ,0.0000026071 ,0.0000000000 ,//
807,0.0000061153 ,0.0000024533 ,0.0000000000 ,//
808,0.0000057529 ,0.0000023089 ,0.0000000000 ,//
809,0.0000054127 ,0.0000021734 ,0.0000000000 ,//
810,0.0000050935 ,0.0000020461 ,0.0000000000 ,//
811,0.0000047938 ,0.0000019266 ,0.0000000000 ,//
812,0.0000045125 ,0.0000018144 ,0.0000000000 ,//
813,0.0000042483 ,0.0000017090 ,0.0000000000 ,//
814,0.0000040002 ,0.0000016099 ,0.0000000000 ,//
815,0.0000037671 ,0.0000015168 ,0.0000000000 ,//
816,0.0000035480 ,0.0000014292 ,0.0000000000 ,//
817,0.0000033421 ,0.0000013469 ,0.0000000000 ,//
818,0.0000031485 ,0.0000012695 ,0.0000000000 ,//
819,0.0000029665 ,0.0000011966 ,0.0000000000 ,//
820,0.0000027953 ,0.0000011281 ,0.0000000000 ,//
821,0.0000026345 ,0.0000010637 ,0.0000000000 ,//
822,0.0000024834 ,0.0000010031 ,0.0000000000 ,//
823,0.0000023414 ,0.0000009462 ,0.0000000000 ,//
824,0.0000022078 ,0.0000008926 ,0.0000000000 ,//
825,0.0000020820 ,0.0000008422 ,0.0000000000 ,//
826,0.0000019636 ,0.0000007946 ,0.0000000000 ,//
827,0.0000018519 ,0.0000007498 ,0.0000000000 ,//
828,0.0000017465 ,0.0000007074 ,0.0000000000 ,//
829,0.0000016471 ,0.0000006675 ,0.0000000000 ,//
830,0.0000015531 ,0.0000006297 ,0.0000000000  //470
};

double* spectrum::Wavelength2xyzTable(void)
{
	return (double*)wavelength2xyz_table;
}

double X_lambda( const double lambda)
{
	int id = (int)(lambda*1000.0) - 360;
	double s = lambda - id/1000.0;

	if ( id < 0 || id == 0 && s < PS_EPS)
	{
		return wavelength2xyz_table[1];
	}
	if ( id > 470 || id == 470 && s < PS_EPS)
	{
		return wavelength2xyz_table[4*470+1];
	}
	double val1 = wavelength2xyz_table[4*id+1];
	id++;
	double val2 = wavelength2xyz_table[4*id+1];


	return val1*(1.0 - s ) + val2*s;
}

double Y_lambda( const double lambda)
{
	int id = (int)(lambda*1000.0) - 360;
	double s = lambda - id/1000.0;

	if ( id < 0 || id == 0 && s < PS_EPS)
	{
		return wavelength2xyz_table[2];
	}
	if ( id > 470 || id == 470 && s < PS_EPS)
	{
		return wavelength2xyz_table[4*470+2];
	}
	double val1 = wavelength2xyz_table[4*id+2];
	id++;
	double val2 = wavelength2xyz_table[4*id+2];


	return val1*(1.0 - s ) + val2*s;
}

double Z_lambda( const double lambda)
{
	int id = (int)(lambda*1000.0) - 360;
	double s = lambda - id/1000.0;

	if ( id < 0 || id == 0 && s < PS_EPS)
	{
		return wavelength2xyz_table[3];
	}
	if ( id > 470 || id == 470 && s < PS_EPS)
	{
		return wavelength2xyz_table[4*470+3];
	}
	double val1 = wavelength2xyz_table[4*id+3];
	id++;
	double val2 = wavelength2xyz_table[4*id+3];


	return val1*(1.0 - s ) + val2*s;
}

//////////////////////////////////////////////////////////
//Simple Analytic Approximations to the CIE XYZ Color Matching Functions
/////////////////////////////////////////////////////////
double xFit_1931( double wave )
{
	wave *= 1000.0;
	double t1 = (wave-442.0)*((wave<442.0)?0.0624:0.0374);
	double t2 = (wave-599.8)*((wave<599.8)?0.0264:0.0323);
	double t3 = (wave-501.1)*((wave<501.1)?0.0490:0.0382);
	return 0.362*exp(-0.5*t1*t1) + 1.056*exp(-0.5*t2*t2)- 0.065*exp(-0.5*t3*t3);
}
double yFit_1931( double wave )
{
	wave *= 1000.0;
	double t1 = (wave-568.8)*((wave<568.8)?0.0213:0.0247);
	double t2 = (wave-530.9)*((wave<530.9)?0.0613:0.0322);
	return 0.821f*exp(-0.5*t1*t1) + 0.286*exp(-0.5*t2*t2);
}
double zFit_1931( double wave )
{
	wave *= 1000.0;
	double t1 = (wave-437.0)*((wave<437.0)?0.0845:0.0278);
	double t2 = (wave-459.0)*((wave<459.0)?0.0385:0.0725);
	return 1.217*exp(-0.5*t1*t1) + 0.681*exp(-0.5*t2*t2);
}

///////////////////////////////
// WCMYRGBXYZ using Gaussians fitting
const float White = 1.0;

const Vector4d Cyan0 = Vector4d(0.0, 0.424537460743542, 0.0866503554583976, 0.560757618949125);
const Vector4d Cyan1 = Vector4d(0.0, 0.246400896854156, 0.0795161416808855, 0.216116362841135);
const Vector4d Cyan2 = Vector4d(1.0, 0.067666394964209, 0.2698588575757230, 0.890716186803857);

const Vector4d Magenta0 = Vector4d(0.0, 0.092393363155047, -0.030670840714796, 0.425200104381996);
const Vector4d Magenta1 = Vector4d(0.0, 0.174734179228986, 0.0690508593874629, 0.983929883263911);
const Vector4d Magenta2 = Vector4d(1.0, 0.613995338323662, 0.0794711389383399, 1.003105061865860);

const Vector4d Yellow0 = Vector4d(0.0, 0.369673263739623, -0.071355497310236, 0.503666150930812);
const Vector4d Yellow1 = Vector4d(0.0, 0.558410218684172,  0.151858057162275, 0.878349029651678);
const Vector4d Yellow2 = Vector4d(1.0, 0.587945864428471,  0.101005427723483, 0.109960421083442);

const Vector4d Red0 = Vector4d(0.0, 0.574803873802654,  0.0349961565910619, 0.670478585641923);
const Vector4d Red1 = Vector4d(0.0, 0.042753652345675, -0.076576978780864,  0.070884754752968);
const Vector4d Red2 = Vector4d(1.0, 0.669048230499984,  0.0587027396330119, 0.957999219817480);

const Vector4d Green0 = Vector4d(0.0, 0.305242141596798,  0.0337596436768638, 0.424248514020785);
const Vector4d Green1 = Vector4d(0.0, 0.476992126451749, -0.0541085157876399, 0.815789194891182);
const Vector4d Green2 = Vector4d(1.0, 0.365833471799225, -0.0583175076362409, 0.792406519710127);

const Vector4d Blue0 = Vector4d(0.0, 0.144760614900738, 0.0848347582999023, 0.993361426917213);
const Vector4d Blue1 = Vector4d(0.0, 0.600421286424602, -0.060880809655396, 0.0744873773945442);
const Vector4d Blue2 = Vector4d(1.0, 0.231505955455338, -0.029894351908322, 0.339396172335299);


const Vector4d CIEX0 = Vector4d(0.26714125, 0.173056848724526, -0.0517890668554628, 0.369341509681465);
const Vector4d CIEX1 = Vector4d(0.0, 0.510852785928701, 0.636521548441552, -0.324530476950362);
const Vector4d CIEX2 = Vector4d(1.0622, 0.547302197035226, 0.0899535691555178, 1.10399973088081);

const Vector4d CIEY0 = Vector4d(0.2671425, 0.86798560108836, 0.150307921271593, -0.354744089805774);
const Vector4d CIEY1 = Vector4d(0, 0.10539332389757, 0.168752691961971, -0.289650515359526);
const Vector4d CIEY2 = Vector4d(1.0002, 0.445956775505726, 0.0920541376951253, 0.814888040084084);

const Vector4d CIEZ0 = Vector4d(0.26714375, 0.174251742295476, -0.0569218355789753, 1.72408897831517);
const Vector4d CIEZ1 = Vector4d(0.0, 0.0542544622978704, 0.0457454482464726, -0.442679263574661);
const Vector4d CIEZ2 = Vector4d(1.7826, 0.711309229610584, 0.285040831286585, -0.407629686738774);




double Gaussian(const double x0, const double s, const double w, const double x)
{
  return w * exp( -(x - x0) * (x - x0) / (2.0 * s * s + 1.0e-20) );
}




double GaussianMixture(const double lambda, const Vector4d& Data0, const Vector4d& Data1, const Vector4d& Data2)
{
	double t = (lambda - 0.380) / (0.780 - 0.380);
	double g0 = Gaussian(Data0.y, Data0.z, Data0.w, t);
	double g1 = Gaussian(Data1.y, Data1.z, Data1.w, t);
	double g2 = Gaussian(Data2.y, Data2.z, Data2.w, t);

	return std::min(std::max(g0 + g1 + g2 + Data0.x, Data1.x), Data2.x);
}

#define RED_SPEC		0
#define GREEN_SPEC		1
#define BLUE_SPEC		2
#define YELLOW_SPEC		3
#define MAGENTA_SPEC	4
#define CYAN_SPEC		5
#define WHITE_SPEC		6

#ifdef SPECTRUM_USE

#define SPECTRUM_STEP32

#ifdef SPECTRUM_STEP32
#define COLOR_LAMBDA(x,y)	Color_lambda2(x,y)
#else
#define COLOR_LAMBDA(x,y)	Color_lambda(x,y)
#endif

double RGB2Spectrum(const Color rgb, const double lambda)
{
	float r2g = rgb.x - rgb.y;
	float g2b = rgb.y - rgb.z;
	float b2r = rgb.z - rgb.x;

#if 10
	if ((rgb.x <= rgb.y) && (rgb.x <= rgb.z)) 
	{
		if (rgb.y <= rgb.z)
		{
			return rgb.x * COLOR_LAMBDA(WHITE_SPEC, lambda) - (r2g * COLOR_LAMBDA(CYAN_SPEC, lambda) + g2b * COLOR_LAMBDA(BLUE_SPEC, lambda));
		}
		else
		{
			return rgb.x * COLOR_LAMBDA(WHITE_SPEC, lambda) + (b2r * COLOR_LAMBDA(CYAN_SPEC, lambda) + g2b * COLOR_LAMBDA(GREEN_SPEC, lambda));
		}
	}
	else if ((rgb.y <= rgb.x) && (rgb.y <= rgb.z)) 
	{
		if (rgb.z <= rgb.x)
		{
			return rgb.y * COLOR_LAMBDA(WHITE_SPEC, lambda) - (g2b * COLOR_LAMBDA(MAGENTA_SPEC, lambda) + b2r * COLOR_LAMBDA(RED_SPEC, lambda)); 
		}
		else
		{
			return rgb.y * COLOR_LAMBDA(WHITE_SPEC, lambda) + (r2g * COLOR_LAMBDA(MAGENTA_SPEC, lambda) + b2r * COLOR_LAMBDA(BLUE_SPEC, lambda));
		}
	}
	else 
	{
		if (rgb.x <= rgb.y)
		{
			return rgb.z * COLOR_LAMBDA(WHITE_SPEC, lambda) - (b2r * COLOR_LAMBDA(YELLOW_SPEC, lambda) + r2g * COLOR_LAMBDA(GREEN_SPEC, lambda));
		}
		else
		{
			return rgb.z * COLOR_LAMBDA(WHITE_SPEC, lambda) + (g2b * COLOR_LAMBDA(YELLOW_SPEC, lambda) + r2g *COLOR_LAMBDA(RED_SPEC, lambda));
		}
	}

#else
	if ((rgb.x <= rgb.y) && (rgb.x <= rgb.z)) 
	{
		if (rgb.y <= rgb.z)
		{
			return rgb.x * White - (r2g * GaussianMixture(lambda, Cyan0, Cyan1, Cyan2) + g2b * GaussianMixture(lambda, Blue0, Blue1, Blue2)); 
		}
		else
		{
			return rgb.x * White + (b2r * GaussianMixture(lambda, Cyan0, Cyan1, Cyan2) + g2b * GaussianMixture(lambda, Green0, Green1, Green2));
		}
	}
	else if ((rgb.y <= rgb.x) && (rgb.y <= rgb.z)) 
	{
		if (rgb.z <= rgb.x)
		{
			return rgb.y * White - (g2b * GaussianMixture(lambda, Magenta0, Magenta1, Magenta2) + b2r * GaussianMixture(lambda, Red0, Red1, Red2)); 
		}
		else
		{
			return rgb.y * White + (r2g * GaussianMixture(lambda, Magenta0, Magenta1, Magenta2) + b2r * GaussianMixture(lambda, Blue0, Blue1, Blue2));
		}
	}
	else 
	{
		if (rgb.x <= rgb.y)
		{
			return rgb.z * White - (b2r * GaussianMixture(lambda, Yellow0, Yellow1, Yellow2) + r2g * GaussianMixture(lambda, Green0, Green1, Green2));
		}
		else
		{
			return rgb.z * White + (g2b * GaussianMixture(lambda, Yellow0, Yellow1, Yellow2) + r2g *GaussianMixture(lambda, Red0, Red1, Red2));
		}
	}
#endif

}

void TestSpectrum2XYZ()
{
	FILE* fp = fopen("TestSpectrum2XYZ.csv", "w");

	for ( int i = 380; i <= 780; i++ )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, CIEX0, CIEX1, CIEX2);
		double y = GaussianMixture(lambda, CIEY0, CIEY1, CIEY2);
		double z = GaussianMixture(lambda, CIEZ0, CIEZ1, CIEZ2);

		double x2 = X_lambda(lambda);
		double y2 = Y_lambda(lambda);
		double z2 = Z_lambda(lambda);

		double x3 = xFit_1931(lambda);
		double y3 = yFit_1931(lambda);
		double z3 = zFit_1931(lambda);
		
		fprintf(fp, "%d,%f,%f,%f,%f,%f,%f,%f,%f,%f\n", i, x, y, z, x2, y2, z2,x3,y3,z3);
	}
	fclose(fp);

}


double Color_lambda( int t, const double lambda)
{
	static double xx[7][10]=
	{
		{
			0.1012000, 
			0.0515000, 
			0.0000000, 
			0.0000000, 
			0.0000000, 
			0.0000000, 
			0.8325000, 
			1.0149000, 
			1.0149000, 
			1.0149000 
		},
		{
			0.0000000, 
			0.0000000, 
			0.0273000, 
			0.7937000, 
			1.0000000, 
			0.9418000, 
			0.1719000, 
			0.0000000, 
			0.0000000, 
			0.0025000 
		},
		{
			1.0000000, 
			1.0000000, 
			0.8916000, 
			0.3323000, 
			0.0000000, 
			0.0000000, 
			0.0003000, 
			0.0369000, 
			0.0483000, 
			0.0496000 
		},
		{
			0.0001000, 
			0.0000000, 
			0.1088000, 
			0.6651000, 
			1.0000000, 
			1.0000000, 
			0.9996000, 
			0.9586000, 
			0.9685000, 
			0.9840000 
		},
		{
			1.0000000, 
			1.0000000, 
			0.9685000, 
			0.2229000, 
			0.0000000, 
			0.0458000, 
			0.8369000, 
			1.0000000, 
			1.0000000, 
			0.9959000 
		},
		{
			0.9710000, 
			0.9426000, 
			1.0007000, 
			1.0007000, 
			1.0007000, 
			1.0007000, 
			0.1564000, 
			0.0000000, 
			0.0000000, 
			0.0000000 
		},
		{
			1.0000000, 
			1.0000000, 
			0.9999000, 
			0.9993000, 
			0.9992000, 
			0.9998000, 
			1.0000000, 
			1.0000000, 
			1.0000000, 
			1.0000000 
		}
	};

	double x = lambda*1000.0 - 380.0;
	if ( x <= 0 ) return xx[t][0];
	if ( x >= 720) return xx[t][9];

	x = 9.0*(lambda*1000.0 -380.0)/(720.0 - 380.0);

	int id = (int)x;
	double s = x - (double)id;

	double val1 = xx[t][id];
	id++;
	if ( id > 9 ) return val1;

	double val2 = xx[t][id];
	return val1*(1.0 - s ) + val2*s;
}

static double refrgb2spect_white[] =
{ 1.0618958571272863e+00, 1.0615019980348779e+00,
1.0614335379927147e+00, 1.0622711654692485e+00,
1.0622036218416742e+00, 1.0625059965187085e+00,
1.0623938486985884e+00, 1.0624706448043137e+00,
1.0625048144827762e+00, 1.0624366131308856e+00,
1.0620694238892607e+00, 1.0613167586932164e+00,
1.0610334029377020e+00, 1.0613868564828413e+00,
1.0614215366116762e+00, 1.0620336151299086e+00,
1.0625497454805051e+00, 1.0624317487992085e+00,
1.0625249140554480e+00, 1.0624277664486914e+00,
1.0624749854090769e+00, 1.0625538581025402e+00,
1.0625326910104864e+00, 1.0623922312225325e+00,
1.0623650980354129e+00, 1.0625256476715284e+00,
1.0612277619533155e+00, 1.0594262608698046e+00,
1.0599810758292072e+00, 1.0602547314449409e+00,
1.0601263046243634e+00, 1.0606565756823634e+00 };

static double refrgb2spect_cyan[] =
{ 1.0414628021426751e+00, 1.0328661533771188e+00,
1.0126146228964314e+00, 1.0350460524836209e+00,
1.0078661447098567e+00, 1.0422280385081280e+00,
1.0442596738499825e+00, 1.0535238290294409e+00,
1.0180776226938120e+00, 1.0442729908727713e+00,
1.0529362541920750e+00, 1.0537034271160244e+00,
1.0533901869215969e+00, 1.0537782700979574e+00,
1.0527093770467102e+00, 1.0530449040446797e+00,
1.0550554640191208e+00, 1.0553673610724821e+00,
1.0454306634683976e+00, 6.2348950639230805e-01,
1.8038071613188977e-01, -7.6303759201984539e-03,
-1.5217847035781367e-04, -7.5102257347258311e-03,
-2.1708639328491472e-03, 6.5919466602369636e-04,
1.2278815318539780e-02, -4.4669775637208031e-03,
1.7119799082865147e-02, 4.9211089759759801e-03,
5.8762925143334985e-03, 2.5259399415550079e-02 };

static double refrgb2spect_magenta[] =
{ 9.9422138151236850e-01, 9.8986937122975682e-01,
9.8293658286116958e-01, 9.9627868399859310e-01,
1.0198955019000133e+00, 1.0166395501210359e+00,
1.0220913178757398e+00, 9.9651666040682441e-01,
1.0097766178917882e+00, 1.0215422470827016e+00,
6.4031953387790963e-01, 2.5012379477078184e-03,
6.5339939555769944e-03, 2.8334080462675826e-03,
-5.1209675389074505e-11, -9.0592291646646381e-03,
3.3936718323331200e-03, -3.0638741121828406e-03,
2.2203936168286292e-01, 6.3141140024811970e-01,
9.7480985576500956e-01, 9.7209562333590571e-01,
1.0173770302868150e+00, 9.9875194322734129e-01,
9.4701725739602238e-01, 8.5258623154354796e-01,
9.4897798581660842e-01, 9.4751876096521492e-01,
9.9598944191059791e-01, 8.6301351503809076e-01,
8.9150987853523145e-01, 8.4866492652845082e-01 };

static double refrgb2spect_yellow[] =
{ 5.5740622924920873e-03, -4.7982831631446787e-03,
-5.2536564298613798e-03, -6.4571480044499710e-03,
-5.9693514658007013e-03, -2.1836716037686721e-03,
1.6781120601055327e-02, 9.6096355429062641e-02,
2.1217357081986446e-01, 3.6169133290685068e-01,
5.3961011543232529e-01, 7.4408810492171507e-01,
9.2209571148394054e-01, 1.0460304298411225e+00,
1.0513824989063714e+00, 1.0511991822135085e+00,
1.0510530911991052e+00, 1.0517397230360510e+00,
1.0516043086790485e+00, 1.0511944032061460e+00,
1.0511590325868068e+00, 1.0516612465483031e+00,
1.0514038526836869e+00, 1.0515941029228475e+00,
1.0511460436960840e+00, 1.0515123758830476e+00,
1.0508871369510702e+00, 1.0508923708102380e+00,
1.0477492815668303e+00, 1.0493272144017338e+00,
1.0435963333422726e+00, 1.0392280772051465e+00 };

static double refrgb2spect_red[] =
{ 1.6575604867086180e-01, 1.1846442802747797e-01,
1.2408293329637447e-01, 1.1371272058349924e-01,
7.8992434518899132e-02, 3.2205603593106549e-02,
-1.0798365407877875e-02, 1.8051975516730392e-02,
5.3407196598730527e-03, 1.3654918729501336e-02,
-5.9564213545642841e-03, -1.8444365067353252e-03,
-1.0571884361529504e-02, -2.9375521078000011e-03,
-1.0790476271835936e-02, -8.0224306697503633e-03,
-2.2669167702495940e-03, 7.0200240494706634e-03,
-8.1528469000299308e-03, 6.0772866969252792e-01,
9.8831560865432400e-01, 9.9391691044078823e-01,
1.0039338994753197e+00, 9.9234499861167125e-01,
9.9926530858855522e-01, 1.0084621557617270e+00,
9.8358296827441216e-01, 1.0085023660099048e+00,
9.7451138326568698e-01, 9.8543269570059944e-01,
9.3495763980962043e-01, 9.8713907792319400e-01 };

static double refrgb2spect_green[] =
{ 2.6494153587602255e-03, -5.0175013429732242e-03,
-1.2547236272489583e-02, -9.4554964308388671e-03,
-1.2526086181600525e-02, -7.9170697760437767e-03,
-7.9955735204175690e-03, -9.3559433444469070e-03,
6.5468611982999303e-02, 3.9572875517634137e-01,
7.5244022299886659e-01, 9.6376478690218559e-01,
9.9854433855162328e-01, 9.9992977025287921e-01,
9.9939086751140449e-01, 9.9994372267071396e-01,
9.9939121813418674e-01, 9.9911237310424483e-01,
9.6019584878271580e-01, 6.3186279338432438e-01,
2.5797401028763473e-01, 9.4014888527335638e-03,
-3.0798345608649747e-03, -4.5230367033685034e-03,
-6.8933410388274038e-03, -9.0352195539015398e-03,
-8.5913667165340209e-03, -8.3690869120289398e-03,
-7.8685832338754313e-03, -8.3657578711085132e-06,
5.4301225442817177e-03, -2.7745589759259194e-03 };

static double refrgb2spect_blue[] =
{ 9.9209771469720676e-01, 9.8876426059369127e-01,
9.9539040744505636e-01, 9.9529317353008218e-01,
9.9181447411633950e-01, 1.0002584039673432e+00,
9.9968478437342512e-01, 9.9988120766657174e-01,
9.8504012146370434e-01, 7.9029849053031276e-01,
5.6082198617463974e-01, 3.3133458513996528e-01,
1.3692410840839175e-01, 1.8914906559664151e-02,
-5.1129770932550889e-06, -4.2395493167891873e-04,
-4.1934593101534273e-04, 1.7473028136486615e-03,
3.7999160177631316e-03, -5.5101474906588642e-04,
-4.3716662898480967e-05, 7.5874501748732798e-03,
2.5795650780554021e-02, 3.8168376532500548e-02,
4.9489586408030833e-02, 4.9595992290102905e-02,
4.9814819505812249e-02, 3.9840911064978023e-02,
3.0501024937233868e-02, 2.1243054765241080e-02,
6.9596532104356399e-03, 4.1733649330980525e-03 };


// Original 11 bin representation from smits paper (obsolete)
//static double refrgb2spect_white[] =	{ 1.0000, 1.0000, 0.9999, 0.9993, 0.9992, 0.9998, 1.0000, 1.0000, 1.0000, 1.0000 };
//static double refrgb2spect_cyan[] =	{ 0.9710, 0.9426, 1.0007, 1.0007, 1.0007, 1.0007, 0.1564, 0.0000, 0.0000, 0.0000 };
//static double refrgb2spect_magenta[] =	{ 1.0000, 1.0000, 0.9685, 0.2229, 0.0000, 0.0458, 0.8369, 1.0000, 1.0000, 0.9959 };
//static double refrgb2spect_yellow[] =	{ 0.0001, 0.0000, 0.1088, 0.6651, 1.0000, 1.0000, 0.9996, 0.9586, 0.9685, 0.9840 };
//static double refrgb2spect_red[] =		{ 0.1012, 0.0515, 0.0000, 0.0000, 0.0000, 0.0000, 0.8325, 1.0149, 1.0149, 1.0149 };
//static double refrgb2spect_green[] =	{ 0.0000, 0.0000, 0.0273, 0.7937, 1.0000, 0.9418, 0.1719, 0.0000, 0.0000, 0.0025 };
//static double refrgb2spect_blue[] =	{ 1.0000, 1.0000, 0.8916, 0.3323, 0.0000, 0.0000, 0.0003, 0.0369, 0.0483, 0.0496 };


double Color_lambda2( int t, const double lambda)
{

	double* xx = 0;
	switch (t)
	{
	case RED_SPEC:
		xx = refrgb2spect_red;
		break;
	case GREEN_SPEC:
		xx = refrgb2spect_green;
		break;
	case BLUE_SPEC:
		xx = refrgb2spect_blue;
		break;
	case YELLOW_SPEC:
		xx = refrgb2spect_yellow;
		break;
	case MAGENTA_SPEC:
		xx = refrgb2spect_magenta;
		break;
	case CYAN_SPEC:
		xx = refrgb2spect_cyan;
		break;
	case WHITE_SPEC:
		xx = refrgb2spect_white;
		break;
	}

	double x = lambda*1000.0 - 380.0;
	if ( x <= 0 ) return xx[0];
	if ( x >= 720) return xx[31];

	x = 31.0*(lambda*1000.0 -380.0)/(720.0 - 380.0);

	int id = (int)x;
	double s = x - (double)id;

	double val1 = xx[id];
	id++;
	if ( id > 31 ) return val1;

	double val2 = xx[id];
	return val1*(1.0 - s ) + val2*s;
}

void TestSpectrum()
{
	FILE* fp = fopen("TestSpectrum.csv", "w");

	for ( double i = 380; i <= 720; i += 1 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Red0, Red1, Red2);
		double y = Color_lambda(RED_SPEC, lambda);

		fprintf(fp, "%.1f,%f,%f,", i, x,y);
		
		x = GaussianMixture(lambda, Green0, Green1, Green2);
		y = Color_lambda(GREEN_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Blue0, Blue1, Blue2);
		y = Color_lambda(BLUE_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Yellow0, Yellow1, Yellow2);
		y = Color_lambda(YELLOW_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Magenta0, Magenta1, Magenta2);
		y = Color_lambda(MAGENTA_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Cyan0, Cyan1, Cyan2);
		y = Color_lambda(CYAN_SPEC, lambda);
		fprintf(fp, "%f,%f\n", x,y);
	}
	fclose(fp);
}

void Test2Spectrum()
{
	FILE* fp = fopen("Test2Spectrum.csv", "w");

	for ( double i = 380; i <= 720; i += 1 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Red0, Red1, Red2);
		double y = Color_lambda2(RED_SPEC, lambda);

		fprintf(fp, "%.1f,%f,%f,", i, x,y);

		x = GaussianMixture(lambda, Green0, Green1, Green2);
		y = Color_lambda2(GREEN_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Blue0, Blue1, Blue2);
		y = Color_lambda2(BLUE_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Yellow0, Yellow1, Yellow2);
		y = Color_lambda2(YELLOW_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Magenta0, Magenta1, Magenta2);
		y = Color_lambda2(MAGENTA_SPEC, lambda);
		fprintf(fp, "%f,%f,", x,y);

		x = GaussianMixture(lambda, Cyan0, Cyan1, Cyan2);
		y = Color_lambda2(CYAN_SPEC, lambda);
		fprintf(fp, "%f,%f\n", x,y);
	}
	fclose(fp);
}

void TestRedSpectrum()
{
	FILE* fp = fopen("TestSpectrum_red.csv", "w");

	double xx[]=
	{
		0.1012,
		0.0515,
		0,
		0,
		0,
		0,
		0.8325,
		1.0149,
		1.0149,
		1.0149
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Red0, Red1, Red2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}
void Test2RedSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_red.csv", "w");

	double xx[]=
	{ 1.6575604867086180e-01,   1.1846442802747797e-01,
	1.2408293329637447e-01,   1.1371272058349924e-01,
	7.8992434518899132e-02,   3.2205603593106549e-02,
	-1.0798365407877875e-02,   1.8051975516730392e-02,
	5.3407196598730527e-03,   1.3654918729501336e-02,
	-5.9564213545642841e-03,  -1.8444365067353252e-03,
	-1.0571884361529504e-02,  -2.9375521078000011e-03,
	-1.0790476271835936e-02,  -8.0224306697503633e-03,
	-2.2669167702495940e-03,   7.0200240494706634e-03,
	-8.1528469000299308e-03,   6.0772866969252792e-01,
	9.8831560865432400e-01,   9.9391691044078823e-01,
	1.0039338994753197e+00,   9.9234499861167125e-01,
	9.9926530858855522e-01,   1.0084621557617270e+00,
	9.8358296827441216e-01,   1.0085023660099048e+00,
	9.7451138326568698e-01,   9.8543269570059944e-01,
	9.3495763980962043e-01,   9.8713907792319400e-01 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Red0, Red1, Red2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}
void TestGreenSpectrum()
{
	FILE* fp = fopen("TestSpectrum_green.csv", "w");

	double xx[]=
	{
		0,
		0,
		0.0273,
		0.7937,
		1,
		0.9418,
		0.1719,
		0,
		0,
		0.0025
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Green0, Green1, Green2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void Test2GreenSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_green.csv", "w");

	double xx[]=
	{ 2.6494153587602255e-03,  -5.0175013429732242e-03,
	-1.2547236272489583e-02,  -9.4554964308388671e-03,
	-1.2526086181600525e-02,  -7.9170697760437767e-03,
	-7.9955735204175690e-03,  -9.3559433444469070e-03,
	6.5468611982999303e-02,   3.9572875517634137e-01,
	7.5244022299886659e-01,   9.6376478690218559e-01,
	9.9854433855162328e-01,   9.9992977025287921e-01,
	9.9939086751140449e-01,   9.9994372267071396e-01,
	9.9939121813418674e-01,   9.9911237310424483e-01,
	9.6019584878271580e-01,   6.3186279338432438e-01,
	2.5797401028763473e-01,   9.4014888527335638e-03,
	-3.0798345608649747e-03,  -4.5230367033685034e-03,
	-6.8933410388274038e-03,  -9.0352195539015398e-03,
	-8.5913667165340209e-03,  -8.3690869120289398e-03,
	-7.8685832338754313e-03,  -8.3657578711085132e-06,
	5.4301225442817177e-03,  -2.7745589759259194e-03 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Green0, Green1, Green2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}
void TestBlueSpectrum()
{
	FILE* fp = fopen("TestSpectrum_blue.csv", "w");

	double xx[]=
	{
		1.0000000, 
		1.0000000, 
		0.8916000, 
		0.3323000, 
		0.0000000, 
		0.0000000, 
		0.0003000, 
		0.0369000, 
		0.0483000, 
		0.0496000 
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Blue0, Blue1, Blue2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void Test2BlueSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_blue.csv", "w");

	double xx[]=
	{ 9.9209771469720676e-01,   9.8876426059369127e-01,
	9.9539040744505636e-01,   9.9529317353008218e-01,
	9.9181447411633950e-01,   1.0002584039673432e+00,
	9.9968478437342512e-01,   9.9988120766657174e-01,
	9.8504012146370434e-01,   7.9029849053031276e-01,
	5.6082198617463974e-01,   3.3133458513996528e-01,
	1.3692410840839175e-01,   1.8914906559664151e-02,
	-5.1129770932550889e-06,  -4.2395493167891873e-04,
	-4.1934593101534273e-04,   1.7473028136486615e-03,
	3.7999160177631316e-03,  -5.5101474906588642e-04,
	-4.3716662898480967e-05,   7.5874501748732798e-03,
	2.5795650780554021e-02,   3.8168376532500548e-02,
	4.9489586408030833e-02,   4.9595992290102905e-02,
	4.9814819505812249e-02,   3.9840911064978023e-02,
	3.0501024937233868e-02,   2.1243054765241080e-02,
	6.9596532104356399e-03,   4.1733649330980525e-03 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Blue0, Blue1, Blue2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void TestYellowSpectrum()
{
	FILE* fp = fopen("TestSpectrum_yellow.csv", "w");

	double xx[]=
	{
		0.0001000, 
		0.0000000, 
		0.1088000, 
		0.6651000, 
		1.0000000, 
		1.0000000, 
		0.9996000, 
		0.9586000, 
		0.9685000, 
		0.9840000 
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Yellow0, Yellow1, Yellow2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void Test2YellowSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_yellow.csv", "w");

	double xx[]=
	{ 5.5740622924920873e-03,  -4.7982831631446787e-03,
	-5.2536564298613798e-03,  -6.4571480044499710e-03,
	-5.9693514658007013e-03,  -2.1836716037686721e-03,
	1.6781120601055327e-02,   9.6096355429062641e-02,
	2.1217357081986446e-01,   3.6169133290685068e-01,
	5.3961011543232529e-01,   7.4408810492171507e-01,
	9.2209571148394054e-01,   1.0460304298411225e+00,
	1.0513824989063714e+00,   1.0511991822135085e+00,
	1.0510530911991052e+00,   1.0517397230360510e+00,
	1.0516043086790485e+00,   1.0511944032061460e+00,
	1.0511590325868068e+00,   1.0516612465483031e+00,
	1.0514038526836869e+00,   1.0515941029228475e+00,
	1.0511460436960840e+00,   1.0515123758830476e+00,
	1.0508871369510702e+00,   1.0508923708102380e+00,
	1.0477492815668303e+00,   1.0493272144017338e+00,
	1.0435963333422726e+00,   1.0392280772051465e+00 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Yellow0, Yellow1, Yellow2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void TestMagentaSpectrum()
{
	FILE* fp = fopen("TestSpectrum_magenta.csv", "w");

	double xx[]=
	{
		1.0000000, 
		1.0000000, 
		0.9685000, 
		0.2229000, 
		0.0000000, 
		0.0458000, 
		0.8369000, 
		1.0000000, 
		1.0000000, 
		0.9959000 
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Magenta0, Magenta1, Magenta2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void Test2MagentaSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_magenta.csv", "w");

	double xx[]=
	{ 9.9422138151236850e-01,   9.8986937122975682e-01,
	9.8293658286116958e-01,   9.9627868399859310e-01,
	1.0198955019000133e+00,   1.0166395501210359e+00,
	1.0220913178757398e+00,   9.9651666040682441e-01,
	1.0097766178917882e+00,   1.0215422470827016e+00,
	6.4031953387790963e-01,   2.5012379477078184e-03,
	6.5339939555769944e-03,   2.8334080462675826e-03,
	-5.1209675389074505e-11,  -9.0592291646646381e-03,
	3.3936718323331200e-03,  -3.0638741121828406e-03,
	2.2203936168286292e-01,   6.3141140024811970e-01,
	9.7480985576500956e-01,   9.7209562333590571e-01,
	1.0173770302868150e+00,   9.9875194322734129e-01,
	9.4701725739602238e-01,   8.5258623154354796e-01,
	9.4897798581660842e-01,   9.4751876096521492e-01,
	9.9598944191059791e-01,   8.6301351503809076e-01,
	8.9150987853523145e-01,   8.4866492652845082e-01 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Magenta0, Magenta1, Magenta2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void TestCyanSpectrum()
{
	FILE* fp = fopen("TestSpectrum_cyan.csv", "w");

	double xx[]=
	{
		0.9710000, 
		0.9426000, 
		1.0007000, 
		1.0007000, 
		1.0007000, 
		1.0007000, 
		0.1564000, 
		0.0000000, 
		0.0000000, 
		0.0000000 
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Cyan0, Cyan1, Cyan2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}


void Test2CyanSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_cyan.csv", "w");

	double xx[]=
	{ 1.0414628021426751e+00,   1.0328661533771188e+00,
	1.0126146228964314e+00,   1.0350460524836209e+00,
	1.0078661447098567e+00,   1.0422280385081280e+00,
	1.0442596738499825e+00,   1.0535238290294409e+00,
	1.0180776226938120e+00,   1.0442729908727713e+00,
	1.0529362541920750e+00,   1.0537034271160244e+00,
	1.0533901869215969e+00,   1.0537782700979574e+00,
	1.0527093770467102e+00,   1.0530449040446797e+00,
	1.0550554640191208e+00,   1.0553673610724821e+00,
	1.0454306634683976e+00,   6.2348950639230805e-01,
	1.8038071613188977e-01,  -7.6303759201984539e-03,
	-1.5217847035781367e-04,  -7.5102257347258311e-03,
	-2.1708639328491472e-03,   6.5919466602369636e-04,
	1.2278815318539780e-02,  -4.4669775637208031e-03,
	1.7119799082865147e-02,   4.9211089759759801e-03,
	5.8762925143334985e-03,   2.5259399415550079e-02 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = GaussianMixture(lambda, Cyan0, Cyan1, Cyan2);

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}


void TestWhiteSpectrum()
{
	FILE* fp = fopen("TestSpectrum_white.csv", "w");

	double xx[]=
	{
		1.0000000, 
		1.0000000, 
		0.9999000, 
		0.9993000, 
		0.9992000, 
		0.9998000, 
		1.0000000, 
		1.0000000, 
		1.0000000, 
		1.0000000 
	};

	int j = 0;
	for ( double i = 380; i <= 720; i += 37.77777777 )
	{
		double lambda = i/1000.0;
		double x = White;

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

void Test2WhiteSpectrum()
{
	FILE* fp = fopen("Test2Spectrum_white.csv", "w");

	double xx[]=
	{ 1.0618958571272863e+00,   1.0615019980348779e+00,
	1.0614335379927147e+00,   1.0622711654692485e+00,
	1.0622036218416742e+00,   1.0625059965187085e+00,
	1.0623938486985884e+00,   1.0624706448043137e+00,
	1.0625048144827762e+00,   1.0624366131308856e+00,
	1.0620694238892607e+00,   1.0613167586932164e+00,
	1.0610334029377020e+00,   1.0613868564828413e+00,
	1.0614215366116762e+00,   1.0620336151299086e+00,
	1.0625497454805051e+00,   1.0624317487992085e+00,
	1.0625249140554480e+00,   1.0624277664486914e+00,
	1.0624749854090769e+00,   1.0625538581025402e+00,
	1.0625326910104864e+00,   1.0623922312225325e+00,
	1.0623650980354129e+00,   1.0625256476715284e+00,
	1.0612277619533155e+00,   1.0594262608698046e+00,
	1.0599810758292072e+00,   1.0602547314449409e+00,
	1.0601263046243634e+00,   1.0606565756823634e+00 };

	int j = 0;
	for ( double i = 380; i <= 720; i += 10.9677419 )
	{
		double lambda = i/1000.0;
		double x = White;

		fprintf(fp, "%.1f,%f,%f\n", i, x,xx[j]);j++;
	}
	fclose(fp);

}

Color Spectrum2XYZ(const double lambda)
{
#if 0
	double x = GaussianMixture(lambda, CIEX0, CIEX1, CIEX2);
	double y = GaussianMixture(lambda, CIEY0, CIEY1, CIEY2);
	double z = GaussianMixture(lambda, CIEZ0, CIEZ1, CIEZ2);
#else
	//double x = X_lambda(lambda);
	//double y = Y_lambda(lambda);
	//double z = Z_lambda(lambda);

	double x = xFit_1931(lambda);
	double y = yFit_1931(lambda);
	double z = zFit_1931(lambda);
	
#endif
	Color xyz(x,y,z);

#if 0
	// E to D65
	// 0.26713798 is for mapping spectrum 1.0 into rgb (1.0, 1.0, 1.0)

	//真白は「白色点(White Point)」と呼ばれ、各色空間で以下の値が用いられます。
	//•CIEXYZ (D65): Xn=0.95047, Yn=1.0000, Zn=1.0883
	//•CIEXYZ (D50): Xn=0.96422, Yn=1.0000, Zn=0.82521

	xyz.x = x * 0.9504700 / 0.26713798;
	xyz.y = y * 1.0000000 / 0.26713798;
	xyz.z = z * 1.0888300 / 0.26713798;
#endif
	return xyz;
}

Color Spectrum2RGB(const double lambda)
{
#if 0
	double x = GaussianMixture(lambda, CIEX0, CIEX1, CIEX2);
	double y = GaussianMixture(lambda, CIEY0, CIEY1, CIEY2);
	double z = GaussianMixture(lambda, CIEZ0, CIEZ1, CIEZ2);
#else
	//double x = X_lambda(lambda);
	//double y = Y_lambda(lambda);
	//double z = Z_lambda(lambda);

	double x = xFit_1931(lambda);
	double y = yFit_1931(lambda);
	double z = zFit_1931(lambda);
#endif

#if 10
	Color xyz(x, y, z);
	return Color(dot(Color(2.3655, -0.8971, -0.4683), xyz),
		dot(Color(-0.5151, 1.4264, 0.0887), xyz),
		dot(Color(0.0052, -0.0144, 1.0089), xyz));
#else
	// E to D65
	// 0.26713798 is for mapping spectrum 1.0 into rgb (1.0, 1.0, 1.0)
	x = x * 0.9504700 / 0.26713798;
	y = y * 1.0000000 / 0.26713798;
	z = z * 1.0888300 / 0.26713798;


	//Reference White = D65
	// XYZ -> sRGB (D65)
	Color rgb;
	rgb.x = (x * ( 3.2404542) + y * (-1.5371385) + z * (-0.4985314));
	rgb.y = (x * (-0.9692660) + y * ( 1.8760108) + z * ( 0.0415560));
	rgb.z = (x * ( 0.0556434) + y * (-0.2040259) + z * ( 1.0572252));

	return rgb;
#endif
}
#endif

};
