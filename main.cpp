#include <iostream>

#define EXTN_ENTLIST
#include "scene.h"
#undef EXTN_ENTLIST

#include "render.h"
#include "scene_env.h"

#include <Windows.h>

#include "exception.h"

#include "mpiutil.h"

#include "DirectryTool.h"

void init_prime_numbers();

//#include "Spectrum.h"
int main(int argc, char **argv) 
{
	//prender::TestSpectrum2XYZ();
	//prender::TestRedSpectrum();
	//prender::TestGreenSpectrum();
	//prender::TestBlueSpectrum();
	//prender::TestYellowSpectrum();
	//prender::TestMagentaSpectrum();
	//prender::TestCyanSpectrum();
	//prender::TestWhiteSpectrum();

	//prender::Test2RedSpectrum();
	//prender::Test2GreenSpectrum();
	//prender::Test2BlueSpectrum();
	//prender::Test2YellowSpectrum();
	//prender::Test2MagentaSpectrum();
	//prender::Test2CyanSpectrum();
	//prender::Test2WhiteSpectrum();

	//prender::TestSpectrum();
	//return 0;

#ifdef USE_MPI
	MPI_Init(&argc, &argv);
#endif
	std::cout << "Path tracing renderer: prender" << std::endl << std::endl;
	// QMC用の素数テーブル初期化
	::init_prime_numbers();


	char thisModuleFileName[_MAX_PATH];
	//実行中のプロセスのフルパス名を取得する
	GetModuleFileNameA(NULL, thisModuleFileName, sizeof(thisModuleFileName));
	if ( argc < 2 )
	{
		printf("%s シーンファイル名\n", thisModuleFileName);
		return -1;
	}

	char parameterFile[_MAX_PATH];
	strcpy(parameterFile, argv[1]);

	//例外 (C 構造化例外) を C++ 型指定例外として処理します
	set_SEfunction();

#ifdef USE_STXXL
	{
		/*
		Boost Software License - Version 1.0 - August 17th, 2003

		Permission is hereby granted, free of charge, to any person or organization
		obtaining a copy of the software and accompanying documentation covered by
		this license (the "Software") to use, reproduce, display, distribute,
		execute, and transmit the Software, and to prepare derivative works of the
		Software, and to permit third-parties to whom the Software is furnished to
		do so, all subject to the following:

		The copyright notices in the Software and this entire statement, including
		the above license grant, this restriction and the following disclaimer,
		must be included in all copies of the Software, in whole or in part, and
		all derivative works of the Software, unless such copies or derivative
		works are solely in the form of machine-executable object code generated by
		a source language processor.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
		SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
		FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
		ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
		DEALINGS IN THE SOFTWARE.
		*/
		char drive[_MAX_DRIVE];	// ドライブ名
		char dir[_MAX_DIR];		// ディレクトリ名
		char fname[_MAX_FNAME];	// ファイル名
		char ext[_MAX_EXT];		// 拡張子

		_splitpath(thisModuleFileName, drive, dir, fname, ext);
		//_splitpath(parameterFile, drive, dir, fname, ext);

		std::cout << "Drive=" << drive << std::endl;
		std::cout << "Dir  =" << dir << std::endl;
		std::cout << "Fname=" << fname << std::endl;
		std::cout << "Ext  =" << ext << std::endl;

		char stxxlcfg[512];
		sprintf(stxxlcfg, "%s%s%s", drive, dir, "stxxl.config");
		printf("STXXLCFG[%s]\n", stxxlcfg);

		// get uninitialized config singleton    
		stxxl::config * cfg = stxxl::config::get_instance();

		const std::string configfile = std::string(stxxlcfg);
		cfg->load_config_file(configfile);
	}
#endif

	//作業用ファイルの削除
	{
		char drive[_MAX_DRIVE];	// ドライブ名
		char dir[_MAX_DIR];		// ディレクトリ名
		char fname[_MAX_FNAME];	// ファイル名
		char ext[_MAX_EXT];		// 拡張子

		_splitpath(parameterFile, drive, dir, fname, ext);

		std::cout << "Drive=" << drive << std::endl;
		std::cout << "Dir  =" << dir << std::endl;
		std::cout << "Fname=" << fname << std::endl;
		std::cout << "Ext  =" << ext << std::endl;


		char imagedir[512];
		sprintf(imagedir, "%s%s", drive, dir);
		if (imagedir[0] == '\0')
		{
			GetCurrentDirectoryA(512, imagedir);
			strcat(imagedir, "\\");
		}
		strcat(imagedir, "image\\");
		printf("imagedir->[%s]\n", imagedir);

		DirectryTool dt;
		if (!dt.ExistDir(imagedir))
		{
			dt.MakeDir(imagedir);
		}
		else
		{
			HANDLE hFind;
			WIN32_FIND_DATAA win32fd;
			char wrkimage[512];
			strcpy(wrkimage, imagedir);
			strcat(wrkimage, "*.*");

			hFind = FindFirstFileA(wrkimage, &win32fd);

			if (hFind == INVALID_HANDLE_VALUE) {
			}
			else
			{
				do {
					std::string file = imagedir;
					file += win32fd.cFileName;
					_unlink(file.c_str());
					//printf("delete %s\n", file.c_str());
				} while (FindNextFileA(hFind, &win32fd));
			}
			FindClose(hFind);
		}
	}

	try
	{
		prender::SceneEnv env;

		//シーンパラメータの読み込み
		env.Load(parameterFile);

		//シーンに配置されたエンティティリストを作成
		prender::CreateEntList(env);


		//レンダリング
		clock_t start = clock();

		prender::Render render(env);

		if (env.energyRedistributionPathTracing)
		{
			render.RunERPT();
		}else
		if (env.metropolisTransport)
		{
			render.RunMLT();
		}
		else
		{
			render.Run();
		}
		render.renderingTime = (double)(clock() - start) / CLOCKS_PER_SEC;
		printf("■レンダリング時間: %f秒\n", render.renderingTime);

#ifdef USE_MPI
		int myrank;
		MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
		if ( myrank == 0)
		{
			//レンダリング結果の出力
			render.Output();
			render.OutputBmp();
		}
#else
		//レンダリング結果の出力
		render.Output();
		render.OutputBmp();
#endif

	}
	catch (const std::exception& e)
	{
		printf("EXCEPTION[%s]\n", e.what());
	}
#ifdef USE_MPI
	MPI_Barrier(MPI_COMM_WORLD);
	MPI_Finalize();
#endif

}
